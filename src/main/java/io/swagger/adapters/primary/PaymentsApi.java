/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.adapters.primary;

import io.swagger.adapters.primary.response.PaymentResponse;
import io.swagger.adapters.primary.request.PaymentRequest;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2022-06-01T16:22:31.174Z")

@Validated
@Api(value = "payments", description = "the payments API")
@RequestMapping(value = "/v1")
public interface PaymentsApi {

    @ApiOperation(value = "Delete payment by paymentId", nickname = "deletePaymentById", notes = "", tags = {"payments",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation")})
    @RequestMapping(value = "/payments/{paymentId}",
            produces = {"application/json"},
            method = RequestMethod.DELETE)
    ResponseEntity<Void> deletePaymentById(@ApiParam(value = "ID of an existing payment", required = true) @PathVariable("paymentId") int paymentId);


    @ApiOperation(value = "Find payment by ID", nickname = "getPaymentById", notes = "Returns a single payment", response = PaymentResponse.class, tags = {"payments",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = PaymentRequest.class),
            @ApiResponse(code = 400, message = "Invalid ID supplied"),
            @ApiResponse(code = 404, message = "Payment not found")})
    @RequestMapping(value = "/payments/{paymentId}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<PaymentResponse> getPaymentById(@ApiParam(value = "ID of payment to return", required = true) @PathVariable("paymentId") int paymentId);


    @ApiOperation(value = "Find payment status by transaction UUID", nickname = "getPaymentStatusByTransactionUUID", notes = "Returns a single payment status", response = String.class, tags = {"payments",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "successful operation", response = PaymentRequest.class),
            @ApiResponse(code = 400, message = "Invalid transaction UUID supplied"),
            @ApiResponse(code = 404, message = "Payment status not found"),
            @ApiResponse(code = 412, message = "Transaction already taken in count")})
    @RequestMapping(value = "/payments/status{transactionUUID}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    ResponseEntity<String> getPaymentStatusByTransactionUUID(@ApiParam(value = "transactionUUID of payment to return", required = true) @PathVariable("transactionUUID") String transactionUUID);


    @ApiOperation(value = "Proceed a payment", nickname = "createPayment", notes = "", tags = {"payments",})
    @ApiResponses(value = {
            @ApiResponse(code = 201, message = "payment done")})
    @RequestMapping(value = "/payments",
            produces = {"application/json"},
            consumes = {"application/json"},
            method = RequestMethod.POST)
    ResponseEntity<Void> createPayment(@ApiParam(value = "Payment that need to be processed", required = true) @Valid @RequestBody PaymentRequest body);

}
